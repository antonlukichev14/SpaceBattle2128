using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace My_part
{
    class Scene
    {
        public char[,] field = new char[10, 20];


        /// <summary>
        /// Запуск сцены
        /// </summary>
        /// <param name="p"></param>
        public void SceneStart(List<Entinty> p)
        {
            SceneDefaultMake();
           
            IncertEntinty(p);
            SceneRender(p);
            SceneLoop(p);

        }
        /// <summary>
        /// Расстановка сущностей на карту
        /// </summary>
        /// <param name="p"></param>
        public void IncertEntinty(List<Entinty> p)
        {
            p[0].Y = 4;
            p[0].X = 1;

            p[1].Y = 1;
            p[1].X = 2;

            p[2].Y = 8;
            p[2].X = 18;

           
            
            field[p[0].Y, p[0].X] = p[0].entintySkin;
            field[p[1].Y, p[1].X] = p[1].entintySkin;
            field[p[2].Y, p[2].X] = p[2].entintySkin;
            
            
            


        }

        public void Update(List<Entinty> p, ConsoleKey Input)
        {
            if (Input == ConsoleKey.W || Input == ConsoleKey.S || Input == ConsoleKey.D || Input == ConsoleKey.A)
            {

                switch (field[p[0].Y, p[0].X + 1])
                {
                    case ' ':
                        field[p[0].Y, p[0].X] = ' ';
                        field[p[0].Y, p[0].X += 1] = p[0].entintySkin;
                        break;

                    case '#':
                        field[p[0].Y, p[0].X] = ' ';
                        field[p[0].Y, p[0].X -= 1] = p[0].entintySkin;
                        break;
                }

                switch (field[p[1].Y + 1, p[1].X])
                {
                    case ' ':
                        field[p[1].Y, p[1].X] = ' ';
                        field[p[1].Y += 1, p[1].X] = p[1].entintySkin;
                        break;

                    case '#':
                        field[p[1].Y, p[1].X] = ' ';
                        field[p[1].Y -= 1, p[1].X] = p[1].entintySkin;
                        break;
                }

                switch (field[p[2].Y - 1, p[2].X - 1])
                {
                    case ' ':
                        field[p[2].Y, p[2].X] = ' ';
                        field[p[2].Y -= 1, p[2].X -= 1] = p[2].entintySkin;
                        break;

                    case '#':
                        field[p[2].Y, p[2].X] = ' ';
                        field[p[2].Y += 1, p[2].X += 1] = p[2].entintySkin;
                        break;
                }


            }

        }
        Hero hero = new Hero(ConsoleColor.Blue, '\u0001');
        public void SceneLoop(List <Entinty> p)
        {
            
            while (true)
            {
                
                Console.Clear();
                SceneRender(p);
                ConsoleKey Input = Console.ReadKey(true).Key;
                hero.MoveHero(field,Input);
                Update(p, Input);
               
                
                
               
            }
        }
        /// <summary>
        /// Создание стандартного поля
        /// </summary>
        public void SceneDefaultMake()
        {
            for (int i = 0; i < field.GetLength(0); i++)
            {
                for (int j = 0; j < field.GetLength(1); j++)
                {
                    field[i, j] = ' ';
                    if (i == 0 || i == field.GetLength(0) - 1 || j == 0 || j == field.GetLength(1) - 1)
                    {
                        field[i, j] = '#';
                    }
                }
            }


        }
        /// <summary>
        /// Отрисовка сцены
        /// </summary>
        /// <param name="p"></param>
        public void SceneRender(List<Entinty> p)
        {


            for (int i = 0; i < field.GetLength(0); i++)
            {
                for (int j = 0; j < field.GetLength(1); j++)
                {

                    char s = ' ';
                    ConsoleColor c = ConsoleColor.White;
                    foreach(var item in p)
                    {
                        if (field[i,j] == item.entintySkin)
                        {
                            
                            s = item.entintySkin;
                            c = item.entintyColor; 
                            break;
                        }
                    }

                    if (field[i,j] == s)
                    {
                        Console.ForegroundColor = c;
                        Console.Write(field[i, j]);
                        Console.ForegroundColor = ConsoleColor.Yellow;
                    }
                    else { Console.Write(field[i, j]); }




                }
                Console.WriteLine();
            }

        }
    }







    class Entinty
    {
        public int Y; 
        public int X;
        public ConsoleColor entintyColor;
        public char entintySkin;
        public Entinty(ConsoleColor entintyColor, char entintySkin)
        {
            this.entintyColor = entintyColor;
            this.entintySkin = entintySkin;
        }
        public Entinty()
        {
            entintyColor = ConsoleColor.White;
            entintySkin = '0';
        }
    }

    
        class Hero : Entinty
        {
        public Hero(ConsoleColor entintyColor, char entintySkin)
        {
            this.entintyColor = entintyColor;
            this.entintySkin = entintySkin;
        }
        public Hero()
        {
            entintyColor = ConsoleColor.White;
            entintySkin = '0';
        }
            public int heroX = 1;
            public int heroY = 1;
            public void MoveHero(char[,] map, ConsoleKey Input)
            {
                //ConsoleKey Input = Console.ReadKey(true).Key;
                switch (Input)
                {

                    case ConsoleKey.W:


                        if (map[heroY - 1, heroX] != '#')
                        {
                            

                            map[heroY, heroX] = ' ';
                            heroY--;
                            map[heroY, heroX] = entintySkin;

                        }


                        break;

                    case ConsoleKey.S:

                        if (map[heroY + 1, heroX] != '#')
                        {
                            

                            map[heroY, heroX] = ' ';
                            heroY++;
                            map[heroY, heroX] = entintySkin;



                        }
                        break;

                    case ConsoleKey.D:
                        if (map[heroY, heroX + 1] != '#')
                        {
                            

                            map[heroY, heroX] = ' ';
                            heroX++;
                            map[heroY, heroX] = entintySkin;


                        }
                        break;

                    case ConsoleKey.A:

                        if (map[heroY, heroX - 1] != '#')
                        {
                            

                            map[heroY, heroX] = ' ';
                            heroX--;
                            map[heroY, heroX] = entintySkin;


                        }
                        break;

                    default:
                    {
                        break;
                    }


                }


            }
        }
    

    internal class Program
    {

        static void Main(string[] args)
        {
            Console.ForegroundColor= ConsoleColor.Yellow;
            Console.CursorVisible= false;
            Scene scene = new Scene();
            Entinty p = new Entinty(ConsoleColor.Green, '@');
            Entinty e1 = new Entinty(ConsoleColor.Red, '&');
            Entinty e3 = new Entinty(ConsoleColor.DarkMagenta, '!');
            Entinty e2 = new Entinty(ConsoleColor.Red, '%');
            Entinty e4 = new Entinty(ConsoleColor.Yellow, '$');
            
            Hero e5 = new Hero(ConsoleColor.Blue, '\u0001');
            List<Entinty> h = new List<Entinty> { p,e3, e2, e5};

            scene.SceneStart(h);
            






        }
    }
}
